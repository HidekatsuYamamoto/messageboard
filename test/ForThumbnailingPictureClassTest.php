<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-19 at 22:09:09.
 */
class for_thumbnailing_picture_classTest extends PHPUnit_Framework_TestCase {

    /**
     * @var for_thumbnailing_picture_class
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new for_thumbnailing_picture_class;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * Generated from @assert (0, 0) == 0.
     *
     * @covers for_thumbnailing_picture_class::figure_HorizontalSize
     */
    public function testFigure_HorizontalSize() {
        $this->assertEquals(
                0
                , $this->object->figure_HorizontalSize(0, 0)
        );
    }

    /**
     * Generated from @assert (300, 300) == 300.
     *
     * @covers for_thumbnailing_picture_class::figure_HorizontalSize
     */
    public function testFigure_HorizontalSize2() {
        $this->assertEquals(
                300
                , $this->object->figure_HorizontalSize(300, 300)
        );
    }

    /**
     * Generated from @assert (600, 600) == 300.
     *
     * @covers for_thumbnailing_picture_class::figure_HorizontalSize
     */
    public function testFigure_HorizontalSize3() {
        $this->assertEquals(
                300
                , $this->object->figure_HorizontalSize(600, 600)
        );
    }

    /**
     * Generated from @assert (300, 600) == 150.
     *
     * @covers for_thumbnailing_picture_class::figure_HorizontalSize
     */
    public function testFigure_HorizontalSize4() {
        $this->assertEquals(
                150
                , $this->object->figure_HorizontalSize(300, 600)
        );
    }

    /**
     * Generated from @assert (600, 300) == 300.
     *
     * @covers for_thumbnailing_picture_class::figure_HorizontalSize
     */
    public function testFigure_HorizontalSize5() {
        $this->assertEquals(
                300
                , $this->object->figure_HorizontalSize(600, 300)
        );
    }

    /**
     * Generated from @assert (900, 900) == 300.
     *
     * @covers for_thumbnailing_picture_class::figure_HorizontalSize
     */
    public function testFigure_HorizontalSize6() {
        $this->assertEquals(
                300
                , $this->object->figure_HorizontalSize(900, 900)
        );
    }

    /**
     * Generated from @assert (600, 300) == 300.
     *
     * @covers for_thumbnailing_picture_class::figure_HorizontalSize
     */
    public function testFigure_HorizontalSize7() {
        $this->assertEquals(
                300
                , $this->object->figure_HorizontalSize(600, 300)
        );
    }

    /**
     * Generated from @assert (300, 600) == 150.
     *
     * @covers for_thumbnailing_picture_class::figure_HorizontalSize
     */
    public function testFigure_HorizontalSize8() {
        $this->assertEquals(
                150
                , $this->object->figure_HorizontalSize(300, 600)
        );
    }

    /**
     * Generated from @assert (0, 0) == 0.
     *
     * @covers for_thumbnailing_picture_class::figure_VerticalSize
     */
    public function testFigure_VerticalSize() {
        $this->assertEquals(
                0
                , $this->object->figure_VerticalSize(0, 0)
        );
    }

    /**
     * Generated from @assert (300, 300) == 300.
     *
     * @covers for_thumbnailing_picture_class::figure_VerticalSize
     */
    public function testFigure_VerticalSize2() {
        $this->assertEquals(
                300
                , $this->object->figure_VerticalSize(300, 300)
        );
    }

    /**
     * Generated from @assert (600, 600) == 300.
     *
     * @covers for_thumbnailing_picture_class::figure_VerticalSize
     */
    public function testFigure_VerticalSize3() {
        $this->assertEquals(
                300
                , $this->object->figure_VerticalSize(600, 600)
        );
    }

    /**
     * Generated from @assert (300, 600) == 300.
     *
     * @covers for_thumbnailing_picture_class::figure_VerticalSize
     */
    public function testFigure_VerticalSize4() {
        $this->assertEquals(
                300
                , $this->object->figure_VerticalSize(300, 600)
        );
    }

    /**
     * Generated from @assert (600, 300) == 150.
     *
     * @covers for_thumbnailing_picture_class::figure_VerticalSize
     */
    public function testFigure_VerticalSize5() {
        $this->assertEquals(
                150
                , $this->object->figure_VerticalSize(600, 300)
        );
    }

    /**
     * Generated from @assert (900, 900) == 300.
     *
     * @covers for_thumbnailing_picture_class::figure_VerticalSize
     */
    public function testFigure_VerticalSize6() {
        $this->assertEquals(
                300
                , $this->object->figure_VerticalSize(900, 900)
        );
    }

    /**
     * Generated from @assert (600, 300) == 150.
     *
     * @covers for_thumbnailing_picture_class::figure_VerticalSize
     */
    public function testFigure_VerticalSize7() {
        $this->assertEquals(
                150
                , $this->object->figure_VerticalSize(600, 300)
        );
    }

    /**
     * Generated from @assert (300, 600) == 300.
     *
     * @covers for_thumbnailing_picture_class::figure_VerticalSize
     */
    public function testFigure_VerticalSize8() {
        $this->assertEquals(
                300
                , $this->object->figure_VerticalSize(300, 600)
        );
    }

    /**
     * @covers for_thumbnailing_picture_class::__destruct
     * @todo   Implement test__destruct().
     */
    public function test__destruct() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
